<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>sakhno.springframework.mssc-inventory-failover</groupId>
    <artifactId>mssc-inventory-failover</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>mssc-inventory-failover</name>
    <description>MSSC Inventory Failover</description>

    <organization>
        <name>Sakhno Yaroslav SingleDevCom</name>
    </organization>

    <developers>
        <developer>
            <name>Sakhno Yaroslav</name>
            <organization>Sakhno Yaroslav SingleDevCom</organization>
        </developer>
    </developers>

    <properties>
        <java.version>17</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <spring-cloud.version>2024.0.0</spring-cloud.version>
        <docker.image.prefix>mssc-beer-inventory-failover</docker.image.prefix>
        <docker.image.name>${project.artifactId}</docker.image.name>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>

        <!--Зависимости для трассировки и логирования-->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-bridge-otel</artifactId>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-exporter-zipkin</artifactId>
        </dependency>
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>6.3</version>
        </dependency>

        <!--Зависимости для упрощения разработки-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!--Зависимости для тестирования-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.micrometer</groupId>
                <artifactId>micrometer-tracing-bom</artifactId>
                <version>1.0.0</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!--
                Этот плагин отвечает за компиляцию Java-кода в проекте с использованием Maven.
                AnnotationProcessorPaths указывает, какие процессоры аннотаций нужно использовать при компиляции.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <!--
                Этот плагин предназначен для сборки, упаковки и запуска Spring Boot приложений с использованием Maven.
                Определяет главный класс, который будет использоваться при запуске приложения.
                Исключает Lombok из финального JAR-файла.
                Layers> используется в Spring Boot для разделения JAR-файла на слои при упаковке Docker-образа.
            -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>sakhno.springframework.msscinventoryfailover.MsscInventoryFailoverApplication</mainClass>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                    <layers>
                        <includeLayerTools>true</includeLayerTools>
                    </layers>
                </configuration>
            </plugin>
            <!--
                Этот плагин от Fabric8 используется для сборки, упаковки и загрузки Docker-образов прямо из Maven.
                dockerHost - Определяет, как плагин взаимодействует с Docker (локально или по сети).
                Verbose=true - Включает подробный вывод лога.
                Name - Определяет имя Docker-образа (например, myregistry/myapp).
                Alias - Псевдоним образа, используется в плагине.
                DockerFileDir - Указывает, что образ собирается из Dockerfile.
                Tags - Присваивает образу теги (latest, версия проекта).
            -->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.45.0</version>
                <configuration>
                    <!--<dockerHost>http://127.0.0.1:2375</dockerHost>
                    <dockerHost>unix://var/run/docker.sock</dockerHost>-->
                    <verbose>true</verbose>
                    <images>
                        <image>
                            <name>${docker.image.prefix}/${docker.image.name}</name>
                            <alias>${project.artifactId}</alias>
                            <build>
                                <dockerFileDir>${project.basedir}</dockerFileDir>
                                <tags>
                                    <tag>latest</tag>
                                    <tag>${project.version}</tag>
                                </tags>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
